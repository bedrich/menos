#!/usr/bin/env node

var less = require('less');
var fs = require('fs');

// Does file exist?
fs.stat(process.argv[2], function(err, stats) {
	if (err) {
		console.error('✖ ' + process.argv[2] + ' was not found.', err);
	} else {
		main(process.argv[2]);
	}
});

function main (filename) {
	var manifest;

	try {
		manifest = JSON.parse(fs.readFileSync(filename, 'utf-8'));
	} catch (e) {
		console.error(e);
	}

	if (process.argv[3] === '--watch') {
		watchLess(manifest);
	} else {
		parseLess(manifest);
	}
}

function watchLess (manifest) {
	// Watch multiple files
}

function parseLess (settings) {
	var cssPath = settings.paths.css;
	var opts = { 'compress': false };

	if (settings.compress) {
		cssPath = settings.paths.min;
		opts = { compress: true };
	}

	// Do we have files to parse?
	if (settings.files.length > 0) {
		_parse(0);
	}

	function _parse(i) {
		var parser = new (less.Parser)({ 'paths': [settings.paths.less] });
		var cssFile = cssPath + settings.files[i].css + '.css';
		var lessFile = settings.paths.less + settings.files[i].less + '.less';
		var lessBody = fs.readFileSync(lessFile, 'utf-8');

		parser.parse(lessBody, function (err, tree) {
			if (err) {
				return console.error(err);
			} else {
				console.log('★ [' + lessFile + '] was successfully parsed.');
				fs.writeFileSync(cssFile, tree.toCSS(opts));

				// Any more files to parse?
				if ((settings.files.length-1) != i) {
					_parse(i+1);
				}
			}
		});
	}
}
