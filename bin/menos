#!/usr/bin/env node

var less = require('less');
var fs = require('fs');
var path = require('path');

// Look for config.json or use specified file
var config = process.argv[2] ? process.argv[2] : process.env.PWD + '/config.json';

// Does config exist?
path.exists(config, function(exists) {
	if (!exists) {
		console.error('✖ Config file does not exist.');
	} else {
		main();
	}
});

function main () {
	var manifest;

	try {
		manifest = JSON.parse(fs.readFileSync(config, 'utf-8'));
	} catch (e) {
		console.error(e);
	}

	parseLess(manifest);
}

function parseLess (settings) {
	var basePath = settings.path_project.charAt(0) === '~' ? process.env.HOME + settings.path_project.substring(1) : settings.path_project;
	var lessPath = basePath + settings.path_less;
	var cssPath = basePath + settings.path_css;
	var ext;
	var opts;

	if (settings.compress) {
		cssExt = '.min.css';
		opts = { compress: true, yuicompress: true };
	} else {
		cssExt = '.css';
		opts = { compress: false };
	}

	// Do we have files to parse?
	if (settings.files.length > 0) {
		_parse(0);
	}

	function _parse(i) {
		var parser = new (less.Parser)({ 'paths': [lessPath] });
		var cssFile = cssPath + '/' + settings.files[i] + cssExt;
		var lessFile = lessPath + '/' + settings.files[i] + '.less';
		var lessBody = fs.readFileSync(lessFile, 'utf-8');

		parser.parse(lessBody, function (err, tree) {
			if (err) {
				return console.error(err);
			} else {
				fs.writeFileSync(cssFile, tree.toCSS(opts));
				console.log('★ [' + lessFile + '] was successfully parsed.');

				// Any more files to parse?
				if ((settings.files.length-1) != i) {
					_parse(i+1);
				}
			}
		});
	}
}
